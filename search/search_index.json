{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Fastapi Extensions Small library that provides utils for common cases in app development with fastapi Repository : github Some features SQLAlchemy helpers for SQLAlchemy Sessions session manager Authentication Identity management and authentication Requirements Python 3.9+ Installation $ pip install fapi-ext Example Create regular FastAPI application from fastapi import FastAPI app = FastAPI() To add sqlalchemy support install SQLAlchemy and add it to lifespan. First define lifespan function. from fastapi-ext.sqla.lifespan import sqla_init, sqla_dispose async def lifespan(app: FastAPI): sqla_lifespan = await sqla_init(app) yield { \"sqla\": sqla_lifespan } await sqla_dispose(sqla_lifespan) Note: key in yielded dict MUST be sqla for sqlalchemy Now you could create models and repositories from fastapi-ext.sqla.model import Base, IDMixin, CreatedUpdatedAtMixin class Post(IDMixin, CreatedUpdatedAtMixin, Base): title: Mapped[str] text: Mapped[str]","title":"Home"},{"location":"#fastapi-extensions","text":"Small library that provides utils for common cases in app development with fastapi Repository : github Some features SQLAlchemy helpers for SQLAlchemy Sessions session manager Authentication Identity management and authentication","title":"Fastapi Extensions"},{"location":"#requirements","text":"Python 3.9+","title":"Requirements"},{"location":"#installation","text":"$ pip install fapi-ext","title":"Installation"},{"location":"#example","text":"Create regular FastAPI application from fastapi import FastAPI app = FastAPI() To add sqlalchemy support install SQLAlchemy and add it to lifespan. First define lifespan function. from fastapi-ext.sqla.lifespan import sqla_init, sqla_dispose async def lifespan(app: FastAPI): sqla_lifespan = await sqla_init(app) yield { \"sqla\": sqla_lifespan } await sqla_dispose(sqla_lifespan) Note: key in yielded dict MUST be sqla for sqlalchemy Now you could create models and repositories from fastapi-ext.sqla.model import Base, IDMixin, CreatedUpdatedAtMixin class Post(IDMixin, CreatedUpdatedAtMixin, Base): title: Mapped[str] text: Mapped[str]","title":"Example"},{"location":"install/","text":"Installation Guide","title":"Installation"},{"location":"install/#installation-guide","text":"","title":"Installation Guide"},{"location":"session/","text":"Session Sessions are identified by session_id Session data could be json or signed json (as JWS/JWT) one app could have multiple session objects with separate cookies class LoginSession(BaseModel): code: Optional[UUID] = None login_session = Session[LoginSession](name=\"login_session\", auto_create=True, model=LoginSession) @app.get('/') async def session_info(session: Annotated[Session, Depends(login_session)]): assert session.initialized() assert session.session_id() is not None assert session.data.code is None this will automatically create session cookie and empty session object in session storage Storages InMemory Memcached Redis Sqlalchemy","title":"Session"},{"location":"session/#session","text":"Sessions are identified by session_id Session data could be json or signed json (as JWS/JWT) one app could have multiple session objects with separate cookies class LoginSession(BaseModel): code: Optional[UUID] = None login_session = Session[LoginSession](name=\"login_session\", auto_create=True, model=LoginSession) @app.get('/') async def session_info(session: Annotated[Session, Depends(login_session)]): assert session.initialized() assert session.session_id() is not None assert session.data.code is None this will automatically create session cookie and empty session object in session storage","title":"Session"},{"location":"session/#storages","text":"","title":"Storages"},{"location":"session/#inmemory","text":"","title":"InMemory"},{"location":"session/#memcached","text":"","title":"Memcached"},{"location":"session/#redis","text":"","title":"Redis"},{"location":"session/#sqlalchemy","text":"","title":"Sqlalchemy"}]}